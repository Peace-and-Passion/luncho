* Luncho Server

** What it does?

  - The Luncho server provides API so that your app or web site can show both Luncho prices and
    local prices. The API provides required data in LunchoData structure to client libraries. The
    client libraries calculate Luncho and local prices locally using cached LunchoData at the client
    side. So, the calculation is local and fast.

  - The Luncho server provides OpenAPI so that you can generate the client libraries.
    - See [[https://www.luncho-de-peace.org/redoc][API documentation]] and [[https://www.luncho-de-peace.org/openapi.json ][schema definition]].
    - However, our client libraries have additional files for the local calculation and caching. See
      README.markdown files.
      - [[../luncho-typescript-fetch][luncho-typescript-fetch]],
      - [[../luncho-python][luncho-python]]

  - The Luncho server hosts [[../app][the Luncho app]] web site.

** Supported lauguages and platforms

  - Client
    - Python
    - TypeScript and Fetch
  - Server
    - Python3 or Pypy3
    - FastAPI (Web framework)
    - gunicorn (Optional)

  - Supported platforms
    - Google App Engine, standard or flexible
    - or any Docker compatible server
    - or any Python

** Installation

*** PRODUCTION Flag

    You can set the PRODUCTION environment variable to "True" to exclude "localhost:8080" from the CORS setting.

    If this flag is not set, the server still runs but CORS allows connection from "localhost:8080".

*** API key for foreign exchange (forex) rate data

  - The Luncho server supports openexchangerates.org, exchangerate.host, and fixer.io. Edit
    src/conf.py to set one to EXCHANGERATE_URLS. Since openexchangerates.org to provides 1000/month
    free access, it is the default.

    EXCHANGERATE_URLS         = [ 'https://openexchangerates.org/api/latest.json?app_id=' ]

  - Obtain an API key of the above selected service, and set it to the FOREX_API_KEY environment
    variable (of shell) or write it in app.yaml if you run on Google App Engine.

    export FOREX_API_KEY=XXXXXXXX

  - The Luncho server updates the forex data daily or hourly. The default is daily and the Luncho
    server fetches the forex data at 00:06 UTC every day. If you prefer hourly update, set
    FOREX_HOURLY_UPDATE in conf.py to True.

    FOREX_HOURLY_UPDATE = True


*** (Optional) Google Cloud Storage

  - Optionally you can use Google Cloud Storage (GCS) for backing up the exchange rates that will be
    used when any of above foreign exchange rate API is unavailable.  Set your bucket name to
    GCS_BUCKET environment variable or write it in app.yaml if you run on Google App Engine. Usually
    it is the same as the URL of GAE app.

    export GCS_BUCKET=luncho-hirano.appspot.com

    If you don't use, don't set it. The server saves the data in data/exchange-last.json file.

*** Local installation

  - [[https://www.pypy.org/download.html][Install pypy3]]  pypy3.7 (Python 3.9) or newer

    (Mac) brew install pypy3
    (Win) ?
    (Linux) ?

  - Install Rust that is required to run pip

    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
       (restart bash to add rustup to PATH)
    rustup install nightly ; rustup default nightly

  - Run the install script to install pypy3 and so on. Check it before run!

    bin/install-packages.sh

  - You have luncho_pypyenv dir that includes site-packages.

** Build client libraries and the app

   bin/build.sh

*** Run a local Luncho server

  bin/start-gunicorn.sh

  - Open a browser at [[http://localhost:8000/v1/all-luncho-data]] for test for API access.
  - See [[../app/README.org][../app/README.org]] how to run the Luncho app.

*** Run on Google App Engine

  - Install gcloud SDK
  - Make a project and deploy
    gcloud auth login
      (gcloud app create --project=luncho-hirano    or your project name)
    gcloud config set project luncho-hirano       (or your project name)
    gcloud app deploy --quiet

*** Docker installation

  - build
     docker compose build --progress plain
  - run
     docker run luncho-server_app

** (Optional) Generation of client libraries with OpenAPI generator, patch a generated file and build

    pypy3 main.py gen
    bin/build.sh

** Test

  - Unit test server
    - pytest test/test_server.py

  - Unit test Python client library
    - bin/start-gunicorn.sh
    - pytest test/test_client_lib.py

  - Unit test Python client library generated by the Open API generator
    - cd ../luncho_python/test; pytest

** [[https://luncho-de-peace.org/#/about][See Data section for data]]

** Author

Dr HIRANO Satoshi, Peace and Passion, University of Tokyo (AIST)

** [[../LICENSE][MIT License]]

Copyright 2019-2022 The National Institute of Advanced Industrial Science and Technology (AIST), Japan
