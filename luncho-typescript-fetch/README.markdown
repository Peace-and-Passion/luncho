# Luncho client library for TypeScript and Fetch

- The client library is [./src/apis/luncho.ts](./src/apis/luncho.ts).

- Although there are files generated by OpenAPI generator, such as [./LunchoApi.ts](./LunchoApi.ts) and [README.md](./README.md), use [./src/apis/luncho.ts](./src/apis/luncho.ts) as it has required functions for data conversion and caching.

## Usage

- Since an npm package is not available yet, use a symlink.

```
    cd LOCATION
    git clone https://github.com/Peace-and-Passion/luncho.git
    cd luncho/luncho-typescript-fetch
    yarn install

    cd YOUR_SRC
    ln -s LOCATION/luncho/luncho-typescript-fetch .
```

```
import { Luncho, LunchoData  } from 'luncho-typescript-fetch';

class Foo {
  luncho: Luncho;
  countryCode: string;

  async func() {
      this.luncho = new Luncho(new Configuration({ basePath: "https://luncho-index.org" }));

      // estimate country code from IP address
      this.countryCode = await this.luncho.get_country_code();

      //  get the local currency value of the country from the US dollar value in US, taking the
      //    price level of the country into account by factor 0 to 1.0.
      const jpy = await this.luncho.get_currency_from_US_dollar(50.0, 'JP', 1.0)

      // get the local currency value of the country from the Luncho value, taking the
      //   price level of the country into account by factor 0 to 1.0.
      const local_currency_value = await this.luncho.get_currency_from_luncho(100.0, 'JP', 1.0);

      // get the Luncho value of the country from the local currency value.
      const luncho_value = await this.luncho.get_luncho_from_currency(50.0, 'JP', 1.0);

      // get the US Dollar value of the country from the Luncho value, taking the
      //    price level of the country into account by factor 0 to 1.0.
      const dollar_value = await this.luncho.get_US_dollar_from_luncho(100, 'JP', 1.0);

      // get a Luncho Data for a country
      const lunchoData: LunchoData = await this.luncho.get_luncho_data({countryCode: 'JP'});

      // load and get a dict of LunchoData of all supported countries.  Data size is about 40KB.
      // if you use data of all countries, call this before in order to load all LunchoDatas at once.
      await this.luncho.get_all_luncho_data();

      // calculate local currency values for all countries
      for (var countryCode of Object.keys(this.luncho.lunchoDataCache)) {
          this.luncho.lunchoDataCache[countryCode]['local_currency_value'] = await this.luncho.get_currency_from_luncho(this.lunchoValue, countryCode);
          this.luncho.lunchoDataCache[countryCode]['dollar_value'] = await this.luncho.get_US_dollar_from_luncho(this.lunchoValue, countryCode, 1.0);
      }
}
```

- See comments for detail on [luncho.ts](./src/apis/luncho.ts).

## Cached data

- The luncho object caches data in these variables. You can use them. But, caution that these data
    will be gone when expired or reloaded.

```
    this.luncho.lunchoDataCache: { [key: string]: LunchoData} = {};  // Cache {CountryCode: LunchoData}
    this.luncho.allLunchoDatasExpiration: number = 0;
    this.luncho.countryCache: { [key: string]: string; };
    this.luncho.countryCodeCache: string;
```

### Locales

- Use [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames][Intl.DisplayNames]] to show country names and currency names in your language. It is available in Chrome but not in Safari.

```
       if (intl.DisplayNames) {
           const intl: any = Intl
           var supportedLocales = intl.DisplayNames.supportedLocalesOf(navigator.languages[0])
           if (supportedLocales.length == 0)
               supportedLocales = ['en'];
           countryNames = new intl.DisplayNames(supportedLocales[0], {type: 'region'})
           currencyNames = new intl.DisplayNames(supportedLocales[0], {type: 'currency'})

           const local_countryName = countryNames.of('JP')
           const local_currencyName = currencyNames.of('JPY')
       }
```
